name: Compile Kernel

on:
  workflow_dispatch:
    inputs:
      device:
        description: 'Choose device'
        required: true
        type: choice
        options:
          - starlte
          - starltekor
          - star2lte
          - star2ltekor
          - crownlte
          - crownltekor
          - build all/zip
          - abort

      toolchain:
        description: 'Choose toolchain'
        required: true
        type: choice
        options:
          - "Clang 12 (LLVM +LTO)"
          - "Clang 14 (LLVM +LTO)"
          - "Clang 18 (LLVM +LTO PGO Bolt MLGO Polly)"
          - "Clang 19 (^)"
          - "Neutron Clang 18 (^)"
          - "Neutron Clang 19 (^)"
          - "Neutron Clang 20 (BETA)"

      selinux:
        description: 'Choose SELinux mode'
        required: true
        type: choice
        options:
          - "SELinux Permissive"
          - "SELinux Enforcing"

      kernel_su:
        description: 'Include KernelSU?'
        required: true
        type: choice
        options:
          - "Yes"
          - "No"

jobs:
  run-apollo-script:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the branch that triggered the workflow
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      # Determine the device input value
      - name: Set device input value
        id: set_device_input
        run: |
          case "${{ github.event.inputs.device }}" in
            starlte) DEVICE_INPUT=1 ;;
            starltekor) DEVICE_INPUT=4 ;;
            star2lte) DEVICE_INPUT=2 ;;
            star2ltekor) DEVICE_INPUT=5 ;;
            crownlte) DEVICE_INPUT=3 ;;
            crownltekor) DEVICE_INPUT=6 ;;
            "build all/zip") DEVICE_INPUT=7 ;;
            abort) DEVICE_INPUT=8 ;;
          esac
          echo "DEVICE_INPUT=${DEVICE_INPUT}" >> $GITHUB_ENV

      # Determine the toolchain input value
      - name: Set toolchain input value
        id: set_toolchain_input
        run: |
          case "${{ github.event.inputs.toolchain }}" in
            "Clang 12 (LLVM +LTO)") TOOLCHAIN_INPUT=1 ;;
            "Clang 14 (LLVM +LTO)") TOOLCHAIN_INPUT=2 ;;
            "Clang 18 (LLVM +LTO PGO Bolt MLGO Polly)") TOOLCHAIN_INPUT=3 ;;
            "Clang 19 (^)") TOOLCHAIN_INPUT=4 ;;
            "Neutron Clang 18 (^)") TOOLCHAIN_INPUT=5 ;;
            "Neutron Clang 19 (^)") TOOLCHAIN_INPUT=6 ;;
            "Neutron Clang 20 (BETA)") TOOLCHAIN_INPUT=7 ;;
          esac
          echo "TOOLCHAIN_INPUT=${TOOLCHAIN_INPUT}" >> $GITHUB_ENV

      # Determine the SELinux mode input value
      - name: Set SELinux mode input value
        id: set_selinux_input
        run: |
          case "${{ github.event.inputs.selinux }}" in
            "SELinux Permissive") SELINUX_INPUT=1 ;;
            "SELinux Enforcing") SELINUX_INPUT=2 ;;
          esac
          echo "SELINUX_INPUT=${SELINUX_INPUT}" >> $GITHUB_ENV

      # Determine the KernelSU inclusion input value
      - name: Set KernelSU inclusion input value
        id: set_kernelsu_input
        run: |
          case "${{ github.event.inputs.kernel_su }}" in
            "Yes") KERNELSU_INPUT=y ;;
            "No") KERNELSU_INPUT=n ;;
          esac
          echo "KERNELSU_INPUT=${KERNELSU_INPUT}" >> $GITHUB_ENV

      # Run the apollo.sh script with all inputs and send final `y` and `Enter`
      - name: Run apollo.sh script with all inputs and final `y` and `Enter`
        run: |
          { echo "${DEVICE_INPUT}"; echo "${TOOLCHAIN_INPUT}"; echo "${SELINUX_INPUT}"; echo "${KERNELSU_INPUT}"; echo "y"; } | ./apollo.sh
